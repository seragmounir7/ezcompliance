import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { environment } from 'src/environments/environment';

@Injectable({
	providedIn: 'root'
})
export class SuperAdminAuthServiceService {
	constructor(private http: HttpClient) {}

	getAllClientAdmin(): Observable<ClinetAdminObj[]> {
		return this.http
			.get<ClientAdminListResponce>(
				`${environment.apiUrl}authentication/superAdmin/getAll/clientAdmin`
			)
			.pipe(
				map((res) =>
					res.data.map((obj) => {
						if (obj.status === Status.Deleted)
							obj['status'] = Status.Deactivated;
						return obj;
					})
				)
			);
	}
	getAllUserByClientAdmin(_id: string): Observable<UserList[]> {
		return this.http
			.get<UserListResponce>(
				`${environment.apiUrl}authentication/superAdmin/getAll/users/by/clientAdmin/${_id}`
			)
			.pipe(map((res) => res.data));
	}

	getAllSubContractorsByClientAdmin(_id: string): Observable<UserList[]> {
		return this.http
			.get<UserListResponce>(
				`${environment.apiUrl}authentication/superAdmin/getAll/subContractors/by/clientAdmin/${_id}`
			)
			.pipe(map((res) => res.data));
	}
}

// Generated by https://quicktype.io

export interface ClientAdminListResponce {
	status: string;
	code: number;
	data: ClinetAdminObj[];
}

export interface ClinetAdminObj {
	FirstLogin: FirstLogin;
	ppe: Ppe;
	plant: Plant;
	loginType: LoginType;
	isMobileVerified: IsVerified;
	isEmailVerified: IsVerified;
	licence: any[];
	status: Status;
	_id: string;
	designation: Designation;
	email: string;
	mobileNumber: string;
	password: string;
	createdAt: Date;
	updatedAt: Date;
	__v: number;
	otp?: null | string;
}

export interface FirstLogin {
	firstLogin: boolean;
	step1: boolean;
	step2: boolean;
	step3: boolean;
	step4: boolean;
}

export enum Designation {
	ClientAdmin = 'ClientAdmin'
}

export enum IsVerified {
	Not = 'Not',
	Verified = 'Verified'
}

export enum LoginType {
	Password = 'Password'
}

export interface Plant {
	plantArr: PlantArr[];
}

export interface Ppe {
	PPEArr: PPEArr[];
}

export enum Status {
	Active = 'active',
	Deleted = 'deleted',
	Deactivated = 'deactivated'
}
//////////////////////

// Generated by https://quicktype.io

export interface UserListResponce {
	status: string;
	code: number;
	data: UserList[];
}

export interface UserList {
	location: Location;
	FirstLogin: FirstLogin;
	emergencyContact: EmergencyContact;
	ppe: Ppe;
	plant: Plant;
	loginType: string;
	isMobileVerified: string;
	isEmailVerified: string;
	licence: Licence[];
	status: string;
	_id: string;
	designation: string;
	title: string;
	email: string;
	position: string;
	roleId: string;
	suburb: string;
	stateId: string;
	department: string;
	phone: string;
	firstName: string;
	lastName: string;
	uploadImage: string;
	clientAdminId: string;
	createdAt: Date;
	updatedAt: Date;
	__v: number;
	mobileNumber?: string;
	reportingTo?: string;
}

export interface FirstLogin {
	firstLogin: boolean;
	step1: boolean;
	step2: boolean;
	step3: boolean;
	step4: boolean;
}

export interface EmergencyContact {
	firstName: string;
	lastName: string;
	email: string;
	phone: string;
	mobile: string;
	relationship: string;
}

export interface Licence {
	licenceName: string;
	licenceNumber: string;
	trainingOrganisation: string;
	expiryDate: string;
	uploadLicence: UploadLicence[];
}

export interface UploadLicence {
	file: string;
	LicenceName: string;
	LicenceNumber: string;
	TrainingQrginisation: string;
	ExpiryDate: string;
}

export interface Location {
	address: string;
	landmark: string;
	state: string;
	postcode?: number;
	country: string;
}

export interface Plant {
	plantArr: PlantArr[];
	plantSignature?: string;
}

export interface PlantArr {
	modelNumber: string;
	serialNumber: string;
	plantType: string;
	serviceRenewDate: string;
}

export interface Ppe {
	PPEArr: PPEArr[];
	signature?: string;
}

export interface PPEArr {
	ppeSupplied: string;
	brand: string;
	issueDate: string;
	replacementDate: string;
}
