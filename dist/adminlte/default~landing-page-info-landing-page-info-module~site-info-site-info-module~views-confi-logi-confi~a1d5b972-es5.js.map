{"version":3,"sources":["webpack:///node_modules/ngx-autosize/__ivy_ngcc__/fesm2015/ngx-autosize.js"],"names":["WindowRef","window","ɵfac","WindowRef_Factory","t","ɵprov","token","factory","providedIn","ngInjectableDef","type","args","MAX_LOOKUP_RETRIES","AutosizeDirective","element","_window","_zone","onlyGrow","useImportant","resized","retries","_destroyed","nativeElement","tagName","_findNestedTextArea","textAreaEl","style","overflow","_onTextAreaFound","value","_minRows","rows","textArea","adjust","_windowResizeHandler","nativeWindow","removeEventListener","changes","querySelector","shadowRoot","console","warn","setTimeout","_addWindowResizeHandler","Debounce","run","runOutsideAngular","addEventListener","inputsChanged","parentNode","currentText","_oldContent","offsetWidth","_oldWidth","clone","cloneNode","parent","width","visibility","position","textContent","appendChild","height","scrollHeight","computedStyle","getComputedStyle","parseInt","getPropertyValue","oldHeight","offsetHeight","willGrow","lineHeight","_getLineHeight","rowsCount","maxRows","maxHeight","Math","max","heightStyle","important","setProperty","emit","removeChild","isNaN","styles","fontSize","floor","replace","AutosizeDirective_Factory","ɵdir","selectors","hostBindings","AutosizeDirective_HostBindings","rf","ctx","AutosizeDirective_input_HostBindingHandler","$event","onInput","target","inputs","minRows","outputs","features","ctorParameters","propDecorators","selector","func","wait","immediate","timeout","context","arguments","later","apply","callNow","clearTimeout","AutosizeModule","ɵmod","ɵinj","AutosizeModule_Factory","providers","imports","ngJitMode","declarations","exports"],"mappings":"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","file":"default~landing-page-info-landing-page-info-module~site-info-site-info-module~views-confi-logi-confi~a1d5b972-es5.js","sourcesContent":["import { Injectable, ɵɵdefineInjectable, EventEmitter, Directive, ElementRef, NgZone, Input, Output, HostListener, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nclass WindowRef {\n    /**\n     * @return {?}\n     */\n    get nativeWindow() {\n        return window;\n    }\n}\nWindowRef.ɵfac = function WindowRef_Factory(t) { return new (t || WindowRef)(); };\nWindowRef.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: WindowRef, factory: WindowRef.ɵfac, providedIn: 'root' });\n/** @nocollapse */ WindowRef.ngInjectableDef = ɵɵdefineInjectable({ factory: function WindowRef_Factory() { return new WindowRef(); }, token: WindowRef, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WindowRef, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAX_LOOKUP_RETRIES = 3;\nclass AutosizeDirective {\n    /**\n     * @param {?} element\n     * @param {?} _window\n     * @param {?} _zone\n     */\n    constructor(element, _window, _zone) {\n        this.element = element;\n        this._window = _window;\n        this._zone = _zone;\n        this.onlyGrow = false;\n        this.useImportant = false;\n        this.resized = new EventEmitter();\n        this.retries = 0;\n        this._destroyed = false;\n        if (this.element.nativeElement.tagName !== 'TEXTAREA') {\n            this._findNestedTextArea();\n        }\n        else {\n            this.textAreaEl = this.element.nativeElement;\n            this.textAreaEl.style.overflow = 'hidden';\n            this._onTextAreaFound();\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minRows(value) {\n        this._minRows = value;\n        if (this.textAreaEl) {\n            this.textAreaEl.rows = value;\n        }\n    }\n    ;\n    /**\n     * @param {?} textArea\n     * @return {?}\n     */\n    onInput(textArea) {\n        this.adjust();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed = true;\n        if (this._windowResizeHandler) {\n            this._window.nativeWindow.removeEventListener('resize', this._windowResizeHandler, false);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this.adjust();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this.adjust(true);\n    }\n    /**\n     * @return {?}\n     */\n    _findNestedTextArea() {\n        this.textAreaEl = this.element.nativeElement.querySelector('TEXTAREA');\n        if (!this.textAreaEl && this.element.nativeElement.shadowRoot) {\n            this.textAreaEl = this.element.nativeElement.shadowRoot.querySelector('TEXTAREA');\n        }\n        if (!this.textAreaEl) {\n            if (this.retries >= MAX_LOOKUP_RETRIES) {\n                console.warn('ngx-autosize: textarea not found');\n            }\n            else {\n                this.retries++;\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._findNestedTextArea();\n                }), 100);\n            }\n            return;\n        }\n        this.textAreaEl.style.overflow = 'hidden';\n        this._onTextAreaFound();\n    }\n    /**\n     * @return {?}\n     */\n    _onTextAreaFound() {\n        this._addWindowResizeHandler();\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this.adjust();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    _addWindowResizeHandler() {\n        this._windowResizeHandler = Debounce((/**\n         * @return {?}\n         */\n        () => {\n            this._zone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.adjust();\n            }));\n        }), 200);\n        this._zone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._window.nativeWindow.addEventListener('resize', this._windowResizeHandler, false);\n        }));\n    }\n    /**\n     * @param {?=} inputsChanged\n     * @return {?}\n     */\n    adjust(inputsChanged = false) {\n        if (!this._destroyed && this.textAreaEl && this.textAreaEl.parentNode) {\n            /** @type {?} */\n            const currentText = this.textAreaEl.value;\n            if (inputsChanged === false &&\n                currentText === this._oldContent &&\n                this.textAreaEl.offsetWidth === this._oldWidth) {\n                return;\n            }\n            this._oldContent = currentText;\n            this._oldWidth = this.textAreaEl.offsetWidth;\n            /** @type {?} */\n            const clone = this.textAreaEl.cloneNode(true);\n            /** @type {?} */\n            const parent = this.textAreaEl.parentNode;\n            clone.style.width = this.textAreaEl.offsetWidth + 'px';\n            clone.style.visibility = 'hidden';\n            clone.style.position = 'absolute';\n            clone.textContent = currentText;\n            parent.appendChild(clone);\n            clone.style.overflow = 'hidden';\n            clone.style.height = 'auto';\n            /** @type {?} */\n            let height = clone.scrollHeight;\n            // add into height top and bottom borders' width\n            /** @type {?} */\n            let computedStyle = this._window.nativeWindow.getComputedStyle(clone, null);\n            height += parseInt(computedStyle.getPropertyValue('border-top-width'));\n            height += parseInt(computedStyle.getPropertyValue('border-bottom-width'));\n            // add into height top and bottom paddings width\n            height += parseInt(computedStyle.getPropertyValue('padding-top'));\n            height += parseInt(computedStyle.getPropertyValue('padding-bottom'));\n            /** @type {?} */\n            const oldHeight = this.textAreaEl.offsetHeight;\n            /** @type {?} */\n            const willGrow = height > oldHeight;\n            if (this.onlyGrow === false || willGrow) {\n                /** @type {?} */\n                const lineHeight = this._getLineHeight();\n                /** @type {?} */\n                const rowsCount = height / lineHeight;\n                if (this._minRows && this._minRows >= rowsCount) {\n                    height = this._minRows * lineHeight;\n                }\n                else if (this.maxRows && this.maxRows <= rowsCount) {\n                    // never shrink the textarea if onlyGrow is true\n                    /** @type {?} */\n                    const maxHeight = this.maxRows * lineHeight;\n                    height = this.onlyGrow ? Math.max(maxHeight, oldHeight) : maxHeight;\n                    this.textAreaEl.style.overflow = 'auto';\n                }\n                else {\n                    this.textAreaEl.style.overflow = 'hidden';\n                }\n                /** @type {?} */\n                const heightStyle = height + 'px';\n                /** @type {?} */\n                const important = this.useImportant ? 'important' : '';\n                this.textAreaEl.style.setProperty('height', heightStyle, important);\n                this.resized.emit(height);\n            }\n            parent.removeChild(clone);\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getLineHeight() {\n        /** @type {?} */\n        let lineHeight = parseInt(this.textAreaEl.style.lineHeight, 10);\n        if (isNaN(lineHeight) && this._window.nativeWindow.getComputedStyle) {\n            /** @type {?} */\n            const styles = this._window.nativeWindow.getComputedStyle(this.textAreaEl);\n            lineHeight = parseInt(styles.lineHeight, 10);\n        }\n        if (isNaN(lineHeight)) {\n            /** @type {?} */\n            const fontSize = this._window.nativeWindow.getComputedStyle(this.textAreaEl, null).getPropertyValue('font-size');\n            lineHeight = Math.floor(parseInt(fontSize.replace('px', ''), 10) * 1.5);\n        }\n        return lineHeight;\n    }\n}\nAutosizeDirective.ɵfac = function AutosizeDirective_Factory(t) { return new (t || AutosizeDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(WindowRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nAutosizeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AutosizeDirective, selectors: [[\"\", \"autosize\", \"\"]], hostBindings: function AutosizeDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function AutosizeDirective_input_HostBindingHandler($event) { return ctx.onInput($event.target); });\n    } }, inputs: { onlyGrow: \"onlyGrow\", useImportant: \"useImportant\", minRows: \"minRows\", maxRows: \"maxRows\" }, outputs: { resized: \"resized\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nAutosizeDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: WindowRef },\n    { type: NgZone }\n];\nAutosizeDirective.propDecorators = {\n    minRows: [{ type: Input }],\n    maxRows: [{ type: Input }],\n    onlyGrow: [{ type: Input }],\n    useImportant: [{ type: Input }],\n    resized: [{ type: Output }],\n    onInput: [{ type: HostListener, args: ['input', ['$event.target'],] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutosizeDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[autosize]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: WindowRef }, { type: ɵngcc0.NgZone }]; }, { onlyGrow: [{\n            type: Input\n        }], useImportant: [{\n            type: Input\n        }], resized: [{\n            type: Output\n        }], minRows: [{\n            type: Input\n        }], \n    /**\n     * @param {?} textArea\n     * @return {?}\n     */\n    onInput: [{\n            type: HostListener,\n            args: ['input', ['$event.target']]\n        }], maxRows: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype._minRows;\n    /** @type {?} */\n    AutosizeDirective.prototype.maxRows;\n    /** @type {?} */\n    AutosizeDirective.prototype.onlyGrow;\n    /** @type {?} */\n    AutosizeDirective.prototype.useImportant;\n    /** @type {?} */\n    AutosizeDirective.prototype.resized;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype.retries;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype.textAreaEl;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype._oldContent;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype._oldWidth;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype._windowResizeHandler;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype._destroyed;\n    /** @type {?} */\n    AutosizeDirective.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype._window;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutosizeDirective.prototype._zone;\n    /* Skipping unhandled member: ;*/\n}\n/**\n * @param {?} func\n * @param {?} wait\n * @param {?=} immediate\n * @return {?}\n */\nfunction Debounce(func, wait, immediate = false) {\n    /** @type {?} */\n    let timeout;\n    return (/**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        const context = this;\n        /** @type {?} */\n        const args = arguments;\n        /** @type {?} */\n        const later = (/**\n         * @return {?}\n         */\n        function () {\n            timeout = null;\n            if (!immediate) {\n                func.apply(context, args);\n            }\n        });\n        /** @type {?} */\n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) {\n            func.apply(context, args);\n        }\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AutosizeModule {\n}\nAutosizeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AutosizeModule });\nAutosizeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AutosizeModule_Factory(t) { return new (t || AutosizeModule)(); }, providers: [\n        WindowRef\n    ], imports: [[]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AutosizeModule, { declarations: [AutosizeDirective], exports: [AutosizeDirective] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutosizeModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [AutosizeDirective],\n                imports: [],\n                providers: [\n                    WindowRef\n                ],\n                exports: [AutosizeDirective]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { AutosizeDirective, AutosizeModule, WindowRef as ɵa };\n\n//# sourceMappingURL=ngx-autosize.js.map"]}